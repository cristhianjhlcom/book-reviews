name: Deploy Laravel App to Digital Ocean Droplet

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  redundant-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cancel Previous Redundant Builds
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

  pint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, dom, fileinfo, mysql, libxml, xml, xmlwriter, dom, tokenizer, filter, json, phar, pcre, openssl, pdo, intl, curl
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Install Composer Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v39
      - name: Run Laravel Pint
        run: ./vendor/bin/pint

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: '20.12.0'
      - name: NPM Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install NPM Dependencies
        run: npm install --force
      - name: Format code with Prettier
        run: npm run format
      - name: Run Eslint
        run: npm run lint

  build:
    needs: [pint, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: '20.12.0'
      - name: NPM Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install NPM Dependencies
        run: npm install --force
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Install Composer Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
      - name: Build Assets with Vite
        run: npm run build
      - name: Build SSR Assets with Vite
        run: npm run build:ssr
      - name: Upload public/build artifact
        uses: actions/upload-artifact@v4
        with:
          name: public-build
          path: public/build
      - name: Upload bootstrap/ssr artifact
        uses: actions/upload-artifact@v4
        with:
          name: bootstrap-ssr
          path: bootstrap/ssr

  tests:
    needs: [pint, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, dom, fileinfo, mysql, libxml, xml, xmlwriter, dom, tokenizer, filter, json, phar, pcre, openssl, pdo, intl, curl
      - name: Create Database
        run: touch ./database/database.sqlite
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Download public/build artifact
        uses: actions/download-artifact@v4
        with:
          name: public-build
          path: public/build
      - name: Download bootstrap/ssr artifact
        uses: actions/download-artifact@v4
        with:
          name: bootstrap-ssr
          path: bootstrap/ssr
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Install Composer Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
      - name: Generate Key
        run: php artisan key:generate
      - name: Run Migrations
        run: php artisan migrate
      - name: Execute tests (Unit) using Pest
        run: php artisan test --testsuite=Unit

  deploy:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download public/build artifact
        uses: actions/download-artifact@v4
        with:
          name: public-build
          path: /var/www/book-reviews/public/build
      - name: Download bootstrap/ssr artifact
        uses: actions/download-artifact@v4
        with:
          name: bootstrap-ssr
          path: /var/www/book-reviews/bootstrap/ssr
      - name: Deploy to Digital Ocean Droplet
        if: ${{ github.event_name == 'push' }}
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          passphrase: ${{ secrets.DO_PASSWORD }}
          port: 22
          script: |
            su - superadmin
            sudo chown -R superadmin:superadmin /var/www/book-reviews/
            sudo chmod -R 755 /var/www/book-reviews/
            cd /var/www/book-reviews
            git reset --hard HEAD
            git clean -fd
            php artisan down
            git pull --ff

            export COMPOSER_ALLOW_SUPERUSER=1
            composer install --no-interaction --prefer-dist --optimize-autoloader

            php artisan migrate --force

            php artisan cache:clear
            php artisan config:clear
            php artisan route:clear
            php artisan view:clear
            php artisan optimize:clear

            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan optimize

            if ! sudo supervisorctl status inertia-ssr | grep -q "RUNNING"; then
              echo "Inertia SSR is not running. Starting..."
              sudo supervisorctl reread
              sudo supervisorctl update
              sudo supervisorctl start inertia-ssr
            else
              echo "Inertia SSR is already running."
            fi

            sudo systemctl restart nginx
            php artisan up

  cleanup:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Delete public/build artifact
        uses: geekyeggo/delete-artifact@v5
        with:
          name: public-build
      - name: Delete bootstrap/ssr artifact
        uses: geekyeggo/delete-artifact@v5
        with:
          name: bootstrap-ssr
